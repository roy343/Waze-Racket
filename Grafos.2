#reader(lib"read.ss""wxme")WXME0109 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 8.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 34 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(0
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mrl"
 #"ib\"))\x00"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 79
(1
 #"((lib \"srcloc-snip.rkt\" \"framework\") (lib \"wxme-srcloc-snip.rkt"
 #"\" \"framework\"))\x00"
) 1 0 93
(2
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-snip"
 #"class-wxme.ss\" \"framework\"))\x00"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(3
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsis"
 #"-snip-wxme.rkt\" \"drracket\" \"private\"))\x00"
) 2 0 88
(4
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.rk"
 #"t\" \"drracket\" \"private\"))\x00"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 60 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 0 36
#"mrlib/syntax-browser:subtitle-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 36 36 140 255 255 255 -1
-1 0 42 #"mrlib/syntax-browser:focused-syntax-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 34 139 34 255 255 255 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1           0 2215 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 7 #"provide"
0 0 24 3 2 #" ("
0 0 14 3 15 #"all-defined-out"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 29 #";Creacion del grafo de prueba"
0 0 17 29 1 #"\n"
0 0 17 3 1 #"("
0 0 17 3 6 #"define"
0 0 17 3 1 #" "
0 0 17 3 12 #"grafoPrueba "
0 0 17 3 1 #"'"
0 0 17 3 3 #"( ("
0 0 17 3 1 #"i"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"              ("
0 0 17 3 1 #"a"
0 0 17 3 2 #" ("
0 0 17 3 1 #"i"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 1 #"d"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"              ("
0 0 17 3 1 #"b"
0 0 17 3 2 #" ("
0 0 17 3 1 #"i"
0 0 17 3 1 #" "
0 0 17 3 1 #"c"
0 0 17 3 1 #" "
0 0 17 3 1 #"d"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"              ("
0 0 17 3 1 #"c"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"x"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"              ("
0 0 17 3 1 #"d"
0 0 17 3 2 #" ("
0 0 17 3 1 #"a"
0 0 17 3 1 #" "
0 0 17 3 1 #"b"
0 0 17 3 1 #" "
0 0 17 3 1 #"f"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"              ("
0 0 17 3 1 #"x"
0 0 17 3 2 #" ("
0 0 17 3 1 #"c"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"              ("
0 0 17 3 1 #"f"
0 0 17 3 2 #" ("
0 0 17 3 1 #"d"
0 0 17 3 2 #"))"
0 0 17 29 1 #"\n"
0 0 17 3 16 #"              ))"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 75
(5
 #";Grafo principal, es el din\xC3\xA1mico que se crea a medida que se a"
 #"gragan nodos"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 14 #"grafoPrincipal"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 2 #"()"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 34 #"; Agregar nodos al grafo principal"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"; Entrada: id del nodo"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"; Salida: grafo creado"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"agregarNodo"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 5 #")))) "
0 0 17 3 44
#";;si el grafo est\303\241 vac\303\255o, a\303\261ada la ciudad"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 6 #"()))))"
0 0 17 3 41 #";; sino, agregue la ciudad al grafo      "
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"Funci\303\263n que agrega rutas entre los nodos"
0 0 17 29 1 #"\n"
0 0 17 3 53 #"Entradas: nodo de inicio, nodo final, peso del camino"
0 0 17 29 1 #"\n"
0 0 17 3 43 #"Salida: Grafo con rutas y pesos respectivos"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"agregarRuta"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"peso"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"agregarRutasAux"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"peso"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"agregarRutasAux"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"peso"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 5 #"Final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #") "
0 0 17 3 62
#";Cuando se termina de recorrer se detiene la funci\303\263n auxiliar"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"Final"
0 0 24 3 2 #") "
0 0 17 3 44 #"; Devuelve un grafo Final con ruts incluidas"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 3 #")) "
0 0 17 3 47 #";Se valida si se encuentra en el nodo de origen"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 15 #"agregarRutasAux"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"peso"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #") "
0 0 17 3 66
(6
 #";Realiza nuevamente la funci\xC3\xB3n ahora sin contar el nodo de ori"
 #"gen"
) 0 0 24 29 1 #"\n"
0 0 24 3 37 #"                                    ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"Final"
0 0 24 3 1 #" "
0 0 17 3 44 #";Se le agrega al grafo final lo siguiente..."
0 0 24 29 1 #"\n"
0 0 24 3 45 #"                                            ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 3 #")) "
0 0 17 3 19 #"; El nodo de origen"
0 0 24 29 1 #"\n"
0 0 24 3 59
#"                                                          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cambiarRutas"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"peso"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 9 #")))))))) "
0 0 17 3 52 #";;conexiones de la ciudad incluyendo el nuevo camino"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 15 #"agregarRutasAux"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"peso"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #") "
0 0 17 3 72
(7
 #";recorre la funci\xC3\xB3n nuevamente ahora sin el primer eleemnto en"
 #" el grafo"
) 0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"Final"
0 0 24 3 1 #" "
0 0 17 3 94
(8
 #";grafo Final ahora es la uni\xC3\xB3n del grafo en formaci\xC3\xB3n y"
 #" el primer elemento del grafo inicial"
) 0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                           ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 4 #"))) "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                 ))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"   ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"Funci\303\263n que agrega un nodo a la lista de conexiones de un nod"
0 0 17 29 1 #"\n"
0 0 17 3 20 #"Entrada: id de nodo "
0 0 17 29 1 #"\n"
0 0 17 3 37 #"Salida: Lista de nodos con conexiones"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 33 #"Esta no puede tener nodos vac\303\255os"
0 0 17 29 1 #"\n"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"cambiarRutas"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"cambiarRutasAux"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"cambiarRutasAux"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 17 3 30 #";Valida si la lista es vac\303\255a "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 4 #"))) "
0 0 17 3 39 #";Si es vac\303\255a agrega el nodo a la lista"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 2 #"id"
0 0 24 3 3 #")))"
0 0 17 3 67
#";En otro caso une la lista actual de coexiones con el nodo deseado "
0 0 24 29 1 #"\n"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";Indica si el recorrido de una ruta sin peso fue exitosa"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 4 #"sol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 3 #")))"
0 0 17 3 70
(9
 #"; Lo hace validando si el final es igual al primer elemento de la rut"
 #"a"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 56 #";Indica si el recorrido de una ruta con peso fue exitosa"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 5 #"sol2?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 3 #")))"
0 0 17 3 86
(10
 #";Al tener peso lo realiza validando el primer elemento del primer ele"
 #"mento de la ruta "
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 43 #";Funci\303\263n que indica los vecinos de un nodo"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vecinos"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"       ("
0 0 14 3 10 #"vecinosAux"
0 0 24 3 2 #" ("
0 0 14 3 5 #"assoc"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #") "
0 0 14 3 8 #"elemento"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";Func\303\263n auxiliar de vecinos"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"vecinosAux"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 6 #"result"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"Funci\303\263n que indica si un nodo es parte de una ruta sin peso."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"miembro?"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 17 3 44 #";Cuando la lista es nula se deja de recorrer"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 17 3 63
(11
 #";Eval\xC3\xBAa si el elemento es igual al primer elemento de la lista"
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"miembro?"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #")))))"
0 0 17 3 85
(12
 #";Si no se cumple lo anterior, realizar recursi\xC3\xB3n con la lista "
 #"sin el primer elemento"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 1 #"#"
0 0 17 3 1 #"|"
0 0 17 29 1 #"\n"
0 0 17 3 61
#"Funci\303\263n que indica si un nodo es parte de una ruta con peso."
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"miembro2?"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 6 #"equal?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 3 #") ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 17 3 61
#";Eval\303\272a si el elemento es igual al primer elemento del grafo"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 9 #"miembro2?"
0 0 24 3 1 #" "
0 0 14 3 8 #"elemento"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 5 #")))))"
0 0 17 3 85 12 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 77
(13
 #"Funci\xC3\xB3n que conecta el nodo con los nodos vecinos seg\xC3\xBAn"
 #" la ruta establecida"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conectar"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 11 #"conectarAux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";Funci\303\263n auxiliar de la conexi\303\263n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"conectarAux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #")"
0 0 17 3 52
#";Cuando no haya m\303\241s vecinos retorna la ruta Creadad"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 8 #"miembro?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 4 #"ruta"
0 0 24 3 2 #") "
0 0 17 3 51 #";verifica si un vecino es parte de la ruta del nodo"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 11 #"conectarAux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 11 #"conectarAux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 4 #"ruta"
0 0 24 3 3 #")) "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #"))"
0 0 17 3 79
(14
 #"; se crea una ruta y se continua con la lista de vecinos sin el prime"
 #"r elemento"
) 0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Funci\303\263n"
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 6 #"genera"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 10 #"conexi\303\263n "
0 0 17 3 5 #"hacia"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 1 #" "
0 0 17 3 5 #"nodos"
0 0 17 3 1 #" "
0 0 17 3 7 #"vecinos"
0 0 17 3 1 #" "
0 0 17 3 3 #"sin"
0 0 17 3 1 #" "
0 0 17 3 7 #"mostrar"
0 0 17 3 1 #" "
0 0 17 3 2 #"el"
0 0 17 3 1 #" "
0 0 17 3 4 #"peso"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"conectar2"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"conectar2Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";Funci\303\263n auxiliar de la conexi\303\263n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"conectar2Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #")"
0 0 17 3 52
#";Cuando no haya m\303\241s vecinos retorna la ruta Creadad"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 8 #"miembro?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #")"
0 0 17 3 51 #";verifica si un vecino es parte de la ruta del nodo"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 12 #"conectar2Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 12 #"conectar2Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 4 #"ruta"
0 0 24 3 3 #")) "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #"))"
0 0 17 3 22 #";se crea una ruta y se"
0 0 17 3 1 #" "
0 0 17 3 8 #"continua"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 1 #" "
0 0 17 3 2 #"la"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 7 #"vecinos"
0 0 17 3 1 #" "
0 0 17 3 3 #"sin"
0 0 17 3 3 #" el"
0 0 17 3 16 #" primer elemento"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"  )))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Funci\303\263n"
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 1 #" "
0 0 17 3 6 #"genera"
0 0 17 3 1 #" "
0 0 17 3 3 #"una"
0 0 17 3 1 #" "
0 0 17 3 9 #"conexi\303\263n"
0 0 17 3 1 #" "
0 0 17 3 5 #"hacia"
0 0 17 3 1 #" "
0 0 17 3 3 #"los"
0 0 17 3 1 #" "
0 0 17 3 5 #"nodos"
0 0 17 3 1 #" "
0 0 17 3 7 #"vecinos"
0 0 17 3 41 #" tomando en cuenta el peso de los caminos"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"conectar3"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"conectar3Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";Funci\303\263n auxiliar de la conexi\303\263n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"conectar3Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #")"
0 0 17 3 52
#";Cuando no haya m\303\241s vecinos retorna la ruta Creadad"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 15 3 4 #"cond"
0 0 24 3 3 #" (("
0 0 14 3 9 #"miembro2?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 2 #") "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #")"
0 0 17 3 96
(15
 #";verifica si un vecino es parte de la ruta del nodo y se utiliza miem"
 #"bro2 cporque considera peso"
) 0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 12 #"conectar3Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #" "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 4 #"else"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                       ("
0 0 14 3 12 #"conectar3Aux"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 3 #")  "
0 0 14 3 4 #"ruta"
0 0 24 3 3 #")) "
0 0 14 3 10 #"rutaCreada"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 7 #"vecinos"
0 0 24 3 3 #")))"
0 0 17 3 22 #";se crea una ruta y se"
0 0 17 3 1 #" "
0 0 17 3 8 #"continua"
0 0 17 3 1 #" "
0 0 17 3 3 #"con"
0 0 17 3 1 #" "
0 0 17 3 2 #"la"
0 0 17 3 1 #" "
0 0 17 3 5 #"lista"
0 0 17 3 1 #" "
0 0 17 3 2 #"de"
0 0 17 3 1 #" "
0 0 17 3 7 #"vecinos"
0 0 17 3 1 #" "
0 0 17 3 3 #"sin"
0 0 17 3 19 #" el primer elemento"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                       ))))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Funci\303\263n"
0 0 17 3 1 #" "
0 0 17 3 3 #"que"
0 0 17 3 35 #" revierte los elementos de una ruta"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 8 #"revertir"
0 0 24 3 1 #" "
0 0 14 3 8 #"rutasAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 8 #"rutasAux"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"revertir"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 7 #"reverse"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 4 #"))) "
0 0 14 3 8 #"rutasAux"
0 0 24 3 1 #")"
0 0 17 3 40 #";Se revierten los elementos de las rutas"
0 0 24 29 1 #"\n"
0 0 24 3 23 #"                      ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 13 #"         ))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 8 #"Funci\303\263n"
0 0 17 3 1 #" "
0 0 17 3 49 #"que busca y retorna las rutas del grafo de prueba"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 11 #"buscaPrueba"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 20 #"buscaRutasTotalesAux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 3 #")) "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Funci\303\263n auxiliar de b\303\272squeda"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"buscaPruebaAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 5 #"total"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"revertir"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"total"
0 0 24 3 2 #"))"
0 0 17 3 61
#";Cuando las rutas son nulas, se realiza la funci\303\263n revertir "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 4 #"sol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #"))"
0 0 17 3 82
(16
 #";Si se lleg\xC3\xB3 al final de manera exitosa se retornan las rutas "
 #"totales construidas"
) 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"buscaPruebaAux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"final"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"grafo"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #") "
0 0 14 3 5 #"total"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 14 #"buscaPruebaAux"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 8 #"conectar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 17 3 99
(17
 #";en otro caso sigue realizando la recursi\xC3\xB3n siguiendo con la l"
 #"ista de rutas sin el primer elemento"
) 0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"final"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"grafo"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"total"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"Funci\303\263n que retorna las rutas sin peso de un grafo"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"buscaSinPeso"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 15 #"buscaSinPesoAux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 3 #")) "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Funci\303\263n auxiliar de b\303\272squeda"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 15 #"buscaSinPesoAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 5 #"total"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"revertir"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"total"
0 0 24 3 2 #"))"
0 0 17 3 60
#";Cuando las rutas son nulas, se realiza la funci\303\263n revertir"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 4 #"sol?"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #"))"
0 0 17 3 82 16 0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"buscaSinPesoAux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"final"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"grafo"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #") "
0 0 14 3 5 #"total"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 15 #"buscaSinPesoAux"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"conectar2"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 17 3 99 17 0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"final"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"grafo"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"total"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"Funci\303\263n que retorna las rutas con peso de un grafo"
0 0 17 29 1 #"\n"
0 0 17 3 39 #"Entrada: nodo de inicio y nodo de final"
0 0 17 29 1 #"\n"
0 0 17 3 41 #"Salida: Lista de rutas con peso del grafo"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"buscaPeso"
0 0 24 3 1 #" "
0 0 14 3 3 #"ini"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"buscaPesoAux"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"ini"
0 0 24 3 1 #" "
0 0 21 3 2 #"'0"
0 0 24 3 4 #"))) "
0 0 14 3 3 #"fin"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 17 3 31 #";Funci\303\263n auxiliar de b\303\272squeda"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"buscaPesoAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 5 #"total"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 8 #"revertir"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"total"
0 0 24 3 2 #"))"
0 0 17 3 60
#";Cuando las rutas son nulas, se realiza la funci\303\263n revertir"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 5 #"sol2?"
0 0 24 3 1 #" "
0 0 14 3 3 #"fin"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"buscaPesoAux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 17 3 82 16 0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 3 #"fin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"grafo"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #") "
0 0 14 3 5 #"total"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 12 #"buscaPesoAux"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 2 #" ("
0 0 14 3 9 #"conectar3"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #") "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 17 3 65
#";Se utiliza el conectar3 porque toma en cuenta el peso de la ruta"
0 0 24 29 1 #"\n"
0 0 24 3 36 #"                                   ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #"))"
0 0 17 3 99 17 0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 3 #"fin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"grafo"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                           "
0 0 14 3 5 #"total"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 52
#"Funci\303\263n que retorna la distancia total de las rutas"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"distanciaRutas"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 17 #"distanciaRutasAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";Funci\303\263n auxiliar de distancias"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"distanciaRutasAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 7 #"totales"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 17 3 75
(18
 #";Cuando las rutas son nulas, se retorna la lista con las distancias t"
 #"otales"
) 0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 7 #"totales"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 17 #"distanciaRutasAux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 3 #") ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"totale"
0 0 14 3 1 #"s"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #"("
0 0 14 3 14 #"distanciaTotal"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 8 #"))))))))"
0 0 17 3 118
(19
 #";En otro caso se realiza la recursi\xC3\xB3n y la distancia del prime"
 #"r elemento de las rutas se concatena a la lista totales"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"Funci\303\263n que retorna la distancia total de una ruta"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 14 #"distanciaTotal"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 1 #")"
0 0 17 3 51 #";Cuando la ruta es nula o recorrida retorna la ruta"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 8 #"distanci"
0 0 14 3 1 #"a"
0 0 14 3 5 #"Total"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 4 #")) ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"ruta"
0 0 24 3 5 #")))))"
0 0 17 3 47 #"; Genera la distancia total al recorrer la ruta"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"Funci\303\263n que retorna el id de la menor lista"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 10 #"menorLista"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 13 #"menorListaAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 21 3 1 #"0"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 30 #";Funci\303\263n auxiliar de la lista"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"menorListaAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"cont"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 17 3 31 #";Cuando se termina de recorrer "
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 4 #"cont"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 2 #"<="
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 13 #"menorListaAux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #") "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 4 #"cont"
0 0 24 3 2 #"))"
0 0 17 3 117
(20
 #"; Si num es menor o igual que el primer elemento de la lista entonces"
 #" se continua con la lista sin el primer elemento"
) 0 0 24 29 1 #"\n"
0 0 24 3 16 #"               ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"menorListaAux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 3 #") ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"cont"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 7 #")))))))"
0 0 17 3 37 #";En otro caso el contador se aumenta "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 2 #"#|"
0 0 17 29 1 #"\n"
0 0 17 3 59
(21
 #"Funci\xC3\xB3n que retorna la ruta m\xC3\xA1s corta de una grafo a ot"
 #"ro"
) 0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 9 #"rutaCorta"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 12 #"rutaCortaAux"
0 0 24 3 2 #" ("
0 0 14 3 9 #"buscaPeso"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 3 #") ("
0 0 14 3 12 #"buscaSinPeso"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 32 #";Funci\303\263n auxiliar de ruta corta"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 12 #"rutaCortaAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 12 #"rutasSinPeso"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 17 3 52 #";Cuando se terminan de recorrer las rutas la retorna"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"rutaCortaAux2"
0 0 24 3 2 #" ("
0 0 14 3 10 #"menorLista"
0 0 24 3 2 #" ("
0 0 14 3 14 #"distanciaRutas"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 3 #")) "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 12 #"rutasSinPeso"
0 0 24 3 4 #"))))"
0 0 17 3 47 #";En otro caso se ejecuta la funci\303\263n auxiliar 2"
0 0 24 29 1 #"\n"
0 0 17 3 34 #";Funci\303\263n auxiliar de ruta corta 2"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"rutaCortaAux2"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 12 #"rutasSinPeso"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 12 #"rutasSinPeso"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 14 #"distanciaTotal"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 13 #"rutaCortaAux2"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 3 #"num"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 12 #"rutasSinPeso"
0 0 24 3 5 #")))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 62
#";;RETORNA TODAS LAS RUTAS DE UN PUNTO A OTRO CON SU PESO TOTAL"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 17 #"buscaRutasTotales"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 14 3 7 #"ordenar"
0 0 24 3 2 #" ("
0 0 14 3 20 #"buscaRutasTotalesAux"
0 0 24 3 2 #" ("
0 0 14 3 12 #"buscaSinPeso"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 3 #") ("
0 0 14 3 14 #"distanciaRutas"
0 0 24 3 2 #" ("
0 0 14 3 9 #"buscaPeso"
0 0 24 3 1 #" "
0 0 14 3 6 #"inicio"
0 0 24 3 1 #" "
0 0 14 3 5 #"final"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 3 #")) "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()) "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 20 #"buscaRutasTotalesAux"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 9 #"pesosRuta"
0 0 24 3 1 #" "
0 0 14 3 5 #"Final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 5 #"Final"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"         ("
0 0 14 3 20 #"buscaRutasTotalesAux"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 9 #"pesosRuta"
0 0 24 3 4 #")  ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"Final"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 3 #") ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 9 #"pesosRuta"
0 0 24 3 9 #")))))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 25 #";;InsertaElementoOrdenado"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 13 #"insertarOrden"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"        ( ("
0 0 14 3 1 #">"
0 0 24 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 3 #") ("
0 0 14 3 5 #"cadar"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                ("
0 0 14 3 13 #"insertarOrden"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"cons"
0 0 24 3 1 #" "
0 0 14 3 3 #"ele"
0 0 24 3 1 #" "
0 0 14 3 5 #"lista"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 42 #";;Genera una lista con las rutas ordenadas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 2 #" ("
0 0 14 3 7 #"ordenar"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #" "
0 0 14 3 9 #"Ordenadas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 24 3 4 #" ( ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 14 3 9 #"Ordenadas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"        ( "
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"ordenar"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 3 #") ("
0 0 14 3 13 #"insertarOrden"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 5 #"rutas"
0 0 24 3 2 #") "
0 0 14 3 9 #"Ordenadas"
0 0 24 3 5 #")))))"
0           0
